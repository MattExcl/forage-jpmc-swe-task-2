From 3022e1f02670f8336f457078532f98c50f77496e Mon Sep 17 00:00:00 2001
From: Joe Ferrer <joe@theforage.com>
Date: Wed, 1 Mar 2023 00:45:20 +1100
Subject: [PATCH 1/2] Move python files to datafeed dir

---
 requirements.txt => datafeed/requirements.txt | 0
 server.py => datafeed/server3.py              | 0
 datafeed/test.csv                             | 0
 3 files changed, 0 insertions(+), 0 deletions(-)
 rename requirements.txt => datafeed/requirements.txt (100%)
 rename server.py => datafeed/server3.py (100%)
 create mode 100644 datafeed/test.csv

diff --git a/requirements.txt b/datafeed/requirements.txt
similarity index 100%
rename from requirements.txt
rename to datafeed/requirements.txt
diff --git a/server.py b/datafeed/server3.py
similarity index 100%
rename from server.py
rename to datafeed/server3.py
diff --git a/datafeed/test.csv b/datafeed/test.csv
new file mode 100644
index 0000000..e69de29
-- 
2.40.1


From 74cff62a7fa50183f561ac8ebf6798158ac45a98 Mon Sep 17 00:00:00 2001
From: MattExcl <73499730+MattExcl@users.noreply.github.com>
Date: Mon, 29 May 2023 13:30:00 -0400
Subject: [PATCH 2/2] Add files via upload

---
 src/App.tsx   | 32 +++++++++++++++++++-------------
 src/Graph.tsx | 15 +++++++++++++--
 2 files changed, 32 insertions(+), 15 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..065c5cc 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -6,8 +6,10 @@ import './App.css';
 /**
  * State declaration for <App />
  */
+//like datatypes
 interface IState {
   data: ServerRespond[],
+  showGrap: boolean
 }
 
 /**
@@ -19,9 +21,8 @@ class App extends Component<{}, IState> {
     super(props);
 
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGrap: false
     };
   }
 
@@ -29,18 +30,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGrap)
+      return (<Graph data={this.state.data}/>)
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ 
+          data:serverResponds,
+          showGrap:true
+        });
+      });
+      x++;
+      if(x > 1000){
+        clearInterval(interval);
+      }
+    },100)
+    
   }
 
   /**
@@ -54,11 +65,6 @@ class App extends Component<{}, IState> {
         </header>
         <div className="App-content">
           <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
             onClick={() => {this.getDataFromServer()}}>
             Start Streaming Data
           </button>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..d3ae83c 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,18 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    elem.setAttribute('view','y_line');
+    elem.setAttribute('column-pivots','["stocks"]')
+    elem.setAttribute('row-pivots','["timestamp"]');
+    elem.setAttribute('columns','["top_ask_price"]')
+    elem.setAttribute('aggregates',`
+    {
+      "stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"
+    }`)
 
     const schema = {
       stock: 'string',
-- 
2.40.1

